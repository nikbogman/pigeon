// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    //binaryTargets = ["linux-musl", "native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    events        Event[]
    contacts      Contact[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Event {
    id          String     @id @default(cuid())
    user        User       @relation(fields: [userId], references: [id])
    userId      String
    title       String
    description String
    date        DateTime
    attendees   Attendee[]
    createdAt   DateTime   @default(now())

    @@unique([userId, title])
}

// enum Status {
//     YES
//     MAYBE
//     NO
//     UNKNOWN
// }

model Attendee {
    id      String @id @default(cuid())
    name    String
    email   String
    event   Event  @relation(fields: [eventId], references: [id])
    eventId String
    status  String @default("UNKNOWN")

    @@unique([name, email, eventId])
}

model Contact {
    id     String @id @default(cuid())
    name   String
    email  String
    user   User   @relation(fields: [userId], references: [id])
    userId String

    @@unique([name, email, userId])
}
